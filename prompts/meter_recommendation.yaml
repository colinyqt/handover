name: "Dynamic Meter Recommendation Engine"
description: "Intelligent meter recommendations with semantic search capabilities"
version: "16.0"

inputs:
  - name: "analysis_file"
    type: "file"
    required: true
    formats: ["txt"]
    description: "Tender analysis output file with extracted clauses and specifications"
  
  - name: "recommendation_strategy"
    type: "text"
    required: false
    default: "balanced"
    description: "Recommendation strategy: 'performance' (best specs), 'cost' (cheapest), 'balanced' (optimal cost/performance)"

databases:
  meters: 'C:\Users\cyqt2\Database\overhaul\databases\meters.db'

# Chroma collections
chroma_collections:
  meters_semantic: 'C:\Users\cyqt2\Database\overhaul\chroma_db\meters'

processing_steps:
  - name: "extract_clauses"
    description: "Extract meter requirements from tender"
    prompt_template: |
      Extract meter/device clauses from the tender analysis:
      
      {{ inputs.analysis_file.content }}
      
      For each clause that mentions meters, power quality monitors, measurement devices, or electrical instruments:
      - Extract the clause identifier (whatever format it uses)
      - Extract device type and description
      - Extract accuracy requirements (if any)
      - Extract special features needed (if any)
      - Extract communication requirements (if any)
      - Extract environmental requirements (if any)
      
      Focus on extracting the actual requirements as stated in the tender.
    timeout: 60


  # Aggregation step: use the mapping from LLM breakdown directly
  - name: "aggregate_atomic_requirements"
    description: "Aggregate atomic requirements from all features into a single mapping."
    type: python
    dependencies: [llm_breakdown_features]
    code: |
      # Use the mapping from the LLM breakdown step directly
      atomic_map = context['dep_llm_breakdown_features']
      if not isinstance(atomic_map, dict):
          print(f"[ERROR] LLM breakdown output is not a dict: {type(atomic_map)}")
          atomic_map = {}
      print(f"[DEBUG] Aggregated atomic requirements: {atomic_map}")
      result = {'atomic_requirements_by_feature': atomic_map}

outputs:
  - type: "text"
    filename: "{{ inputs.analysis_file.basename }}_hybrid_recommendations_{{ timestamp }}.txt"
    content: |
      ================================================================================
      HYBRID METER RECOMMENDATION REPORT
      ================================================================================
      
      Document: {{ inputs.analysis_file.name }}
      Analysis Date: {{ timestamp }}
      Strategy: {{ inputs.recommendation_strategy }}
      Engine: Semantic Search + Database Validation
      
      ================================================================================
      TENDER REQUIREMENTS
      ================================================================================
      
      {{ step_results.extract_clauses.raw_response }}
      
      ================================================================================
      DATABASE VALIDATION
      ================================================================================
      
      Available Meters: {{ step_results.llamaindex_list_all_meters.llamaindex_result }}
      Accuracy Data: {{ step_results.llamaindex_get_meter_accuracy.llamaindex_result }}
      
      ================================================================================
      HYBRID RECOMMENDATIONS
      ================================================================================
      
      {{ step_results.generate_hybrid_recommendations.raw_response }}
      
      ================================================================================
      END OF REPORT
      ================================================================================

  - type: "excel"
    filename: "{{ inputs.analysis_file.basename }}_hybrid_matrix_{{ timestamp }}.xlsx"
    content: |
      # Hybrid Recommendation Matrix
      title: "Semantic Search + Database Validation Results"
      source: "{{ inputs.analysis_file.name }}"
      timestamp: "{{ timestamp }}"
      strategy: "{{ inputs.recommendation_strategy }}"
      
      # Enhanced analysis results
      requirements: "{{ step_results.extract_clauses.raw_response }}"
      semantic_results: "{{ step_results.chroma_semantic_search.results }}"
      database_validation: "{{ step_results.llamaindex_list_all_meters.llamaindex_result }}"
      final_recommendations: "{{ step_results.generate_hybrid_recommendations.raw_response }}"

